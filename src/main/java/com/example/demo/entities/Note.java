package com.example.demo.entities;

import jakarta.persistence.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.ArrayList;
import java.util.List;


/**
 * –ö–ª–∞—Å—Å, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—â–∏–π –∑–∞–º–µ—Ç–∫—É.
 * <p>
 * –ö–∞–∂–¥–∞—è –∑–∞–º–µ—Ç–∫–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏–º–µ—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é,
 * —Ç–µ–≥–∏ –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.
 * </p>
 *
 * @author VladimirBoss
 */
@AllArgsConstructor
@Entity
@Table(name = "notes")
@NoArgsConstructor
@Getter
@Setter
public class Note {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;

    @Column(columnDefinition = "TEXT")
    private String text;

    private boolean pinned;


    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE})
    @JoinColumn(name = "user_id", nullable = false)
    private User user;

    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE})
    @JoinColumn(name = "category_id")
    private Category category;


    @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE})
    @JoinTable(
            name = "note_tags",
            joinColumns = @JoinColumn(name = "note_id"),
            inverseJoinColumns = @JoinColumn(name = "tag_id")
    )
    private List<Tag> tags = new ArrayList<>();


    @OneToOne(mappedBy = "note", fetch = FetchType.EAGER, cascade = CascadeType.ALL, orphanRemoval = true)
    private Reminder reminder = null;

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º, —Ç–µ–∫—Å—Ç–æ–º –∏ —Å—Ç–∞—Ç—É—Å–æ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è.
     *
     * @param title  –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏.
     * @param text   –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏.
     * @param pinned –°—Ç–∞—Ç—É—Å –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏.
     */
    public Note(String title, String text, Boolean pinned) {
        id = null;
        this.title = title;
        this.text = text;
        this.pinned = pinned != null && pinned;
        this.tags = new ArrayList<>();
        this.reminder = null;
    }

    /**
     * –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ —Å –∑–∞–¥–∞–Ω–Ω—ã–º ID, –∑–∞–≥–æ–ª–æ–≤–∫–æ–º –∏ —Ç–µ–∫—Å—Ç–æ–º.
     *
     * @param id      ID –∑–∞–º–µ—Ç–∫–∏.
     * @param title   –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏.
     * @param content –¢–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏.
     */
    public Note(Long id, String title, String content) {
        this.id = id;
        this.title = title;
        this.text = content;
        this.pinned = false;
        this.tags = new ArrayList<>();
    }


    /**
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏.
     *
     * @return –°—Ç—Ä–æ–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–º–µ—Ç–∫–µ.
     */
    @Override
    public String toString() {
        return "Note: " + id +
                ", title='" + title + '\'' +
                ", text='" + text + '\'' +
                (pinned ? " üìå" : "") +
                ' ';
    }

    /**
     * –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–≥ –∫ –∑–∞–º–µ—Ç–∫–µ.
     *
     * @param tag –¢–µ–≥, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫ –∑–∞–º–µ—Ç–∫–µ.
     */
    public void addTag(Tag tag) {
        tags.add(tag);
    }
}
